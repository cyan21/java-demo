
variables:
  APP_NAME: blue
  MVN_REPO: urs-mvn
  MVN_REPO_PROMOTION: urs-mvn-rc-local
  DOCKER_REG: yann.jfrog.io
  DOCKER_REPO: urs-docker
  BUILD_INFO_WEBAPP: $(Build.DefinitionName)-ado
  #BUILD_INFO_DOCKER: docker-$(Build.DefinitionName)-ado
trigger:
- ado2

pool:
  vmImage: ubuntu-latest

jobs:
- job: java_webapp
  steps:
  - task: CmdLine@2
    inputs:
      script: |
        appVersion=`sed -n "s/[[:space:]]*<version>\(.*\)<\/version>/\1/p" src/pom.xml`
        echo "##vso[task.setvariable variable=appversion;isOutput=true]$appVersion"
    name: getVersion

  - task: JFrogAudit@1
    inputs:
      xrayConnection: 'xr_yann_saas'
      workingDirectory: 'src/'
      watchesSource: 'watches'
      watches: 'team'
      allowFailBuild: false
    displayName: 'Scan dependencies before running the build'

  - task: JFrogMaven@1
    inputs:
      mavenPomFile: 'src/pom.xml'
      goals: 'clean install'
      artifactoryResolverService: 'rt_yann_saas'
      targetResolveReleaseRepo: $(MVN_REPO)
      targetResolveSnapshotRepo: $(MVN_REPO)
      artifactoryDeployService: 'rt_yann_saas'
      targetDeployReleaseRepo: $(MVN_REPO)
      targetDeploySnapshotRepo: $(MVN_REPO)
      collectBuildInfo: true
      buildName: $(BUILD_INFO_WEBAPP)
      buildNumber: '$(Build.BuildNumber)'
      includeEnvVars: true
    displayName: 'Build Maven project'

#  - task: JfrogCliV2@1
#    inputs:
#      jfrogPlatformConnection: 'rt_yann_saas_platform'
#      command: 'jf scan src/application/target/multi-module-application-*.jar'
#    displayName: 'Scan generated application'

  - task: JFrogPublishBuildInfo@1
    inputs:
      artifactoryConnection: 'rt_yann_saas'
      buildName: $(BUILD_INFO_WEBAPP)
      buildNumber: '$(Build.BuildNumber)'
    displayName: 'Publish BOM'

  - task: JFrogGenericArtifacts@1
    inputs:
      command: 'Set Properties'
      connection: 'rt_yann_saas'
      setProps: 'app.version=$(getVersion.appversion);app.name=$(APP_NAME)'
      specSource: 'taskConfiguration'
      fileSpec: |
        {
          "files": [
            {
              "pattern": "$(MVN_REPO)/",
              "build": "$(BUILD_INFO_WEBAPP)/$(Build.BuildNumber)",
        "exclusions" : ["*.pom","*library*"]
            }
          ]
        }
      failNoOp: true
    displayName: 'Set properties'
  
  - task: JFrogBuildPromotion@1
    inputs:
      artifactoryConnection: 'rt_yann_saas'
      buildName: '$(BUILD_INFO_WEBAPP)'
      buildNumber: '$(Build.BuildNumber)'
      targetRepo: 'urs-mvn-rc-local'
      status: 'Release_Candidate'
      comment: 'passed the Quality Gates'
      includeDependencies: true
      copy: false
      dryRun: false
    displayName: 'Promote Build Info'

- job: java_docker
  dependsOn:
  - java_webapp

  variables:
  - name: AppVersion
    value: $[ dependencies.java_webapp.outputs['getVersion.appversion'] ]
  - name: JFROG_CLI_BUILD_NAME
    value: 'docker-$(Build.DefinitionName)-ado'
  - name: JFROG_CLI_BUILD_NUMBER
    value: $(Build.BuildNumber)   
  steps:
   - task: Bash@3
     inputs:
       targetType: 'inline'
       script: |
         echo 'Hello inline version'
         echo $(AppVersion) 

   - task: JFrogGenericArtifacts@1
     inputs:
      command: 'Download'
      connection: 'rt_yann_saas'
      specSource: 'taskConfiguration'
      fileSpec: |
        {
          "files": [
            {
              "pattern" : "$(MVN_REPO)/",
              "props"   : "app.name=$(APP_NAME);app.version=$(AppVersion)",
              "target"  : "src/multi-module-application.jar",
              "flat"    : "true"
            }
          ]
        }
      collectBuildInfo: true
      buildName: '$(JFROG_CLI_BUILD_NAME)'
      buildNumber: '$(JFROG_CLI_BUILD_NUMBER)'
      includeEnvVars: true
      failNoOp: true
     displayName: 'Download webapp'

   - task: DockerInstaller@0
     inputs:
       dockerVersion: '17.09.0-ce'
     displayName: 'Install Docker'

   - task: JfrogCliV2@1
     inputs:
      jfrogPlatformConnection: 'rt_yann_saas_platform'
      command: 'jf docker images'
     displayName: 'List docker images'

# REQUIRES DOCKER LOGIN BEFORE
#   - task: JfrogCliV2@1
#     inputs:
#      jfrogPlatformConnection: 'rt_yann_saas_platform'
#      command: 'jf docker build --build-arg REGISTRY=$(DOCKER_REG) -t $(DOCKER_REG)/$(DOCKER_REPO)/azure-java-webapp:$(AppVersion)  src/'
#     displayName: 'Build docker image'

   - task: Docker@2
     inputs:
       containerRegistry: 'yann_saas_docker'
       repository: $(DOCKER_REPO)
       command: 'build'
       Dockerfile: 'src/Dockerfile'
       arguments: '--build-arg REGISTRY=$(DOCKER_REG) -t $(DOCKER_REG)/$(DOCKER_REPO)/azure-java-webapp:$(AppVersion)'
     displayName: 'Build Docker image'

   - task: JFrogDocker@1
     inputs:
        command: 'Scan'
        xrayConnection: 'xr_yann_saas'
        imageName: '$(DOCKER_REG)/$(DOCKER_REPO)/azure-java-webapp:$(AppVersion)'
        watchesSource: 'none'
        licenses: true
        allowFailBuild: true
        threads: '3'
        skipLogin: false
     displayName: 'Scan docker image'

   - task: JFrogDocker@1
     inputs:
       command: 'Push'
       artifactoryConnection: 'rt_yann_saas'
       imageName: '$(DOCKER_REG)/$(DOCKER_REPO)/azure-java-webapp:$(AppVersion)'
       collectBuildInfo: true
       buildName: '$(JFROG_CLI_BUILD_NAME)'
       buildNumber: '$(JFROG_CLI_BUILD_NUMBER)'
       threads: '3'
       skipLogin: false
     displayName: 'Push docker image'

   - task: JFrogPublishBuildInfo@1
     inputs:
      artifactoryConnection: 'rt_yann_saas'
      buildName: $(JFROG_CLI_BUILD_NAME)
      buildNumber: $(JFROG_CLI_BUILD_NUMBER)
     displayName: 'Publish BOM'

   - task: JFrogBuildPromotion@1
     inputs:
      artifactoryConnection: 'rt_yann_saas'
      buildName: '$(JFROG_CLI_BUILD_NAME)'
      buildNumber: '$(JFROG_CLI_BUILD_NUMBER)'
      targetRepo: 'urs-docker-rc-local'
      status: 'Release_Candidate'
      comment: 'passed the Quality Gates'
      includeDependencies: false
      copy: false
      dryRun: false
     displayName: 'Promote Docker Build Info'